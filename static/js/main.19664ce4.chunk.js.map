{"version":3,"sources":["components/people.js","components/app.js","index.js"],"names":["People","_useState","useState","_useState2","_slicedToArray","people","setPeople","_useState3","_useState4","name","setName","useEffect","console","log","concat","_jsxs","children","_jsx","onSubmit","e","preventDefault","target","reset","_toConsumableArray","onChange","value","map","item","idx","App","rootEl","document","getElementById","ReactDOM","render"],"mappings":"sKAgEeA,MA9Df,WAEI,IAAAC,EAA4BC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAAjCI,EAAMF,EAAA,GAAEG,EAASH,EAAA,GACxBI,EAAwBL,mBAAS,IAAGM,EAAAJ,YAAAG,EAAA,GAA7BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GAwCpB,OA3BAG,qBAAU,WACNC,QAAQC,IAAI,8BAA+B,iCAG/CF,qBAAU,WACNC,QAAQC,IAAI,8BAADC,OAA+BT,GAAU,mCACrD,CAACA,IAGJM,qBAAU,WACNC,QAAQC,IAAI,iCAAkCJ,KAC/C,CAACA,EAAMJ,IAIVM,qBAAU,WACNC,QAAQC,IAAI,mBAAoBJ,KACjC,IAGHE,qBAAU,WACN,OAAQ,WACJC,QAAQC,IAAI,4BAA6B,sCAM7CE,eAAA,OAAAC,SAAA,CACIC,cAAA,MAAAD,SAAI,cACJC,cAAA,MAAAD,SAAKP,IACLQ,cAAA,QAAMC,SAtCI,SAACC,GACfA,EAAEC,iBACFD,EAAEE,OAAOC,QACThB,EAAU,GAADQ,OAAAS,YAAKlB,GAAM,CAAEI,MAmCQO,SACtBC,cAAA,SAAOO,SA3CE,SAACL,GAClBT,EAAQS,EAAEE,OAAOI,YA4CbR,cAAA,KAAAD,SAAG,wBAECX,EAAOqB,KAAI,SAACC,EAAMC,GACd,OAAOX,cAAA,OAAAD,SAAgBW,GAANC,MAGzBX,cAAA,KAAAD,SAAG,WCjDAa,MANf,WACI,OACIZ,cAACjB,EAAM,KCFT8B,EAASC,SAASC,eAAe,QAGvCC,IAASC,OAAOjB,cAACY,EAAG,IAAKC,K","file":"static/js/main.19664ce4.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nfunction People() {\n\n    const [people, setPeople] = useState([]);\n    const [name, setName] = useState('');\n\n    const inputHandler = (e) => {\n        setName(e.target.value);\n    }\n\n    const addPerson = (e) => {\n        e.preventDefault();\n        e.target.reset();\n        setPeople([...people, name]);\n    }\n\n    // This will run on every re-render of this component\n    useEffect(() => {\n        console.log(\"%c I RUN ON EVERY RE-RENDER\", 'background:#ccc; color:red');\n    });\n    // This will run only when the name changes\n    useEffect(() => {\n        console.log(`%c I RUN ON PEOPLE CHANGE: ${people}`, 'background:#000; color:purple');\n    }, [people]);\n\n    // when name or people are changed \n    useEffect(() => {\n        console.log(\"I RUN ON NAME, PEOPLE CHANGE: \", name);\n    }, [name, people]);\n\n    // run once on initial rendering \n    // can be a good case to do a GET request form an API\n    useEffect(() => {\n        console.log(\"Initial loading \", name);\n    }, []);\n\n    //UNMOUNT\n    useEffect(() => {\n        return (() => {\n            console.log(\"%c Component unmounted !!\", \"background:yellow; color:black\")\n        })\n    });\n\n\n    return (\n        <div>\n            <h1>your name</h1>\n            <h3>{name}</h3>\n            <form onSubmit={addPerson}>\n                <input onChange={inputHandler} />\n            </form>\n            <p>the list of names: </p>\n            {\n                people.map((item, idx) => {\n                    return <div key={idx}>{item}</div>\n                })\n            }\n            <p>hi</p>\n        </div>\n\n    )\n}\n\nexport default People;","// import React from 'react'; // react 16 needs this\nimport People from './people';\n\nfunction App() {\n    return (\n        <People />\n    )\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/app\";\nconst rootEl = document.getElementById(\"root\");\n// ReactDOM.render(<div>hello</div>, rootEl);\n// instead of having <div>hello</div> we gonna put the App.js it will be like (replace line 2 with this)\nReactDOM.render(<App />, rootEl);"],"sourceRoot":""}